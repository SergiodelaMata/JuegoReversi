#lang racket
(define matrizInicial
  (list
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "B" "N" "-" "-" "-")
   (list "-" "-" "-" "N" "B" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   ))

; Obtiene la lista de casillas que se encuentran de un color en la matriz
(define (get_lista_pos_validas matriz color)
  (define lista_pos_validas '())
  (for*/list ([i 8] [j 8]
    #:when(and (equal? (is_empty matriz  (list i j)) #t) (or (equal? (comprobar_fila matriz color (list i j)) #t) (equal? (comprobar_columna matriz color (list i j)) #t) (equal? (comprobar_diagonales matriz color (list i j)) #t))))
    (append lista_pos_validas (list i j))))

; Comprueba si una casilla se encuentra vacía o no
(define (is_empty matriz pos)
  (if (equal? (list-ref(list-ref matriz (car pos)) (list-ref pos 1)) "-")
     #t #f))

; Obtiene una lista del número de piezas negras y blancas
(define jugadorMax "N") ;He quitado la lista, y que simplemente te de las piezas dependiendo del jugador que recibe
(define jugadorMin "B") ;Por parámetro

(define (contar_piezas matriz jugador)
  (define piezasJugador 0)
  
  (for*/list ([i 8][j 8])
    (cond
      [(and(equal? (list-ref (list-ref matriz i) j)"B")(equal? jugador jugadorMin)) ;Al recorrer la matriz, si ve una "B" suma uno a la variable blancas
      (set! piezasJugador(+ piezasJugador 1))]
      [(and(equal? (list-ref (list-ref matriz i) j)"N")(equal? jugador jugadorMax)) ;Al recorrer la matriz, si ve una "B" suma uno a la variable blancas
      (set! piezasJugador(+ piezasJugador 1))]
      [else 0]
      
     )
  )piezasJugador) ;No sabia como hacer que se vieran las dos sin meterlas en una lista

;(contar_piezas matrizInicial)

;Obtiene una lista de todas posiciones de las piezas blancas
(define (get_lista_pos_piezas_blancas matriz)
  (define pos_piezas_blancas '())
  (for*/list ([i 8]
             [j 8]
             #:when (equal? (list-ref (list-ref matriz i) j) "B"))
    (list i j)))
    
;Obtiene una lista de todas posiciones de las piezas negras
(define (get_lista_pos_piezas_negras matriz)
  (define pos_piezas_negras '())
  (for*/list ([i 8]
             [j 8]
             #:when (equal? (list-ref (list-ref matriz i) j)"N"))
    (list i j)))
    
;(get_lista_pos_piezas_blancas matrizInicial)
;(get_lista_pos_piezas_negras matrizInicial)

;Obtener la matriz ajustando el valor pasado por parámetro en la posición indicada por parámetro (la posición se encuentra en una lista que proporciona la fila, la columna y el cuadrante). 
(define (ajustar_matriz matriz pos_elem_val_0 valor)
  (ajustar_matriz_a_fila matriz (list-ref pos_elem_val_0 0) (list-ref pos_elem_val_0 1) valor))

;Obtiene la matriz ajustada de manera recursiva teniendo en cuenta que si la fila es la que tiene el elemento que se desea cambiar, en esa fila uno de sus elementos será cambiado.
(define (ajustar_matriz_a_fila matriz fila columna valor)
  ;El resto de filas no se modificarán.
  (cond
    [(empty? matriz) '()]
    [(equal? fila 0) (append (list (ajustar_matriz_a_columna (car matriz) columna valor)) (cdr matriz))]
    [else (append (list (car matriz)) (ajustar_matriz_a_fila (cdr matriz) (- fila 1) columna valor))]))

;Obtiene la lista que representa una fila de la matriz con el valor cambiado en uno de sus elementos
(define (ajustar_matriz_a_columna lista columna valor) 
  (cond
    [(empty? lista) '()]
    [(equal? columna 0) (append (list valor) (cdr lista))] ; Sino funciona cdr lista, probar  (ajustar_matriz_a_columna (cdr lista) (- columna 1) valor)
    [else (append (list (car lista)) (ajustar_matriz_a_columna (cdr lista) (- columna 1) valor))]))

; Comprueba si se puede obtener fichas del jugador contrario en la fila
(define (comprobar_fila matriz color pos)
  (cond
    ;Situación en la que se tiene en cuenta la primera o la segunda posición de la fila
    [(or (equal? (list-ref pos 1) 0) (equal? (list-ref pos 1) 1))
     (comp_fila_asc matriz color pos (+ (list-ref pos 1) 1) #f)] ; Estudia las posiciones posteriores
    ;Situación en la que se tiene en cuenta la última o la penúltima posición de la fila
    [(or (equal? (list-ref pos 1) 6) (equal? (list-ref pos 1) 7))
     (comp_fila_desc matriz color pos (- (list-ref pos 1) 1) #f)] ; Estudia las posiciones previas
    [else
     (or (comp_fila_desc matriz color pos (- (list-ref pos 1) 1) #f) (comp_fila_asc matriz color pos (+ (list-ref pos 1) 1) #f))]; Estudia las posiciones previas y posteriores
  ))

; Comprueba si se puede obtener fichas del jugador contrario en la fila a medida que aumenta el valor de la fila
(define (comp_fila_asc matriz color pos num_col ver_opuesto)
  (cond
    [(equal? num_col 8) #f] ;No ha terminado con un valor del color del jugador
    [(equal? (list-ref(list-ref matriz (car pos)) num_col) "-") #f] ;La posición estudiada es vacía
    [(equal? (list-ref(list-ref matriz (car pos)) num_col) color) ver_opuesto] ; Hay una cadena de al menos una ficha del color del otro jugador y termina con otra del color del jugador
    [else (comp_fila_asc matriz color pos (+ num_col 1) #t)]
  ))

; Comprueba si se puede obtener fichas del jugador contrario en la fila a medida que disminuye el valor de la fila
(define (comp_fila_desc matriz color pos num_col ver_opuesto)
  (cond
    [(equal? num_col -1) #f] ;No ha terminado con un valor del color del jugador
    [(equal? (list-ref(list-ref matriz (car pos)) num_col) "-") #f] ;La posición estudiada es vacía
    [(equal? (list-ref(list-ref matriz (car pos)) num_col) color) ver_opuesto] ; Hay una cadena de al menos una ficha del color del otro jugador y termina con otra del color del jugador
    [else (comp_fila_desc matriz color pos (- num_col 1) #t)]
  ))

; Comprueba si se puede obtener fichas del jugador contrario en la columna
(define (comprobar_columna matriz color pos)
  (cond
    ;Situación en la que se tiene en cuenta la primera o la segunda posición de la columna
    [(or (equal? (car pos) 0) (equal? (car pos) 1))
     (comp_columna_asc matriz color pos (+ (car pos) 1) #f)] ; Estudia las posiciones posteriores
    ;Situación en la que se tiene en cuenta la última o la penúltima posición de la columna
    [(or (equal? (car pos) 6) (equal? (car pos) 7))
     (comp_columna_desc matriz color pos (- (car pos) 1) #f)] ; Estudia las posiciones previas
    [else
     (or (comp_columna_desc matriz color pos (- (car pos) 1) #f) (comp_columna_asc matriz color pos (+ (car pos) 1) #f))]; Estudia las posiciones previas y posteriores
  ))

; Comprueba si se puede obtener fichas del jugador contrario en la columna a medida que aumenta el valor de la columna
(define (comp_columna_asc matriz color pos num_fila ver_opuesto)
  (cond
    [(equal? num_fila 8) #f] ;No ha terminado con un valor del color del jugador
    [(equal? (list-ref(list-ref matriz num_fila) (list-ref pos 1)) "-") #f] ;La posición estudiada es vacía
    [(equal? (list-ref(list-ref matriz num_fila) (list-ref pos 1)) color) ver_opuesto] ; Hay una cadena de al menos una ficha del color del otro jugador y termina con otra del color del jugador
    [else (comp_columna_asc matriz color pos (+ num_fila 1) #t)]
  ))

; Comprueba si se puede obtener fichas del jugador contrario en la columna a medida que disminuye el valor de la columna
(define (comp_columna_desc matriz color pos num_fila ver_opuesto)
  (cond
    [(equal? num_fila -1) #f] ;No ha terminado con un valor del color del jugador
    [(equal? (list-ref(list-ref matriz num_fila) (list-ref pos 1)) "-") #f] ;La posición estudiada es vacía
    [(equal? (list-ref(list-ref matriz num_fila) (list-ref pos 1)) color) ver_opuesto] ; Hay una cadena de al menos una ficha del color del otro jugador y termina con otra del color del jugador
    [else (comp_columna_desc matriz color pos (- num_fila 1) #t)]
  ))

; Comprueba si se puede obtener fichas del jugador contrario en las diagonales
(define (comprobar_diagonales matriz color pos)
  (or (comprobar_diagonal_principal matriz color pos)(comprobar_diagonal_secundaria matriz color pos))
  )

; Comprueba si se puede obtener fichas del jugador contrario en la diagonal principal
(define (comprobar_diagonal_principal matriz color pos)
  (cond
    [(and (equal? (car pos) 0) (or (equal? (list-ref pos 1) 6) (equal? (list-ref pos 1) 7))) #f]; La esquina superior derecha no interesa estudiar puesto que no va aportar nada
    [(and (equal? (car pos) 1) (equal? (list-ref pos 1) 7)) #f]
    [(and (equal? (car pos) 7) (or (equal? (list-ref pos 1) 0) (equal? (list-ref pos 1) 1))) #f]; La esquina inferior izquierda no interesa estudiar puesto que no va aportar nada
    [(and (equal? (car pos) 6) (equal? (list-ref pos 1) 0)) #f]
    [(or (equal? (car pos) 0) (equal? (car pos) 1)) (comp_diag_princ_desc matriz color (+ (car pos) 1) (+ (list-ref pos 1) 1) #f)]
    [(or (equal? (car pos) 6) (equal? (car pos) 7)) (comp_diag_princ_asc matriz color (- (car pos) 1) (- (list-ref pos 1) 1) #f)]
    [else (or (comp_diag_princ_desc matriz color (- (car pos) 1) (- (list-ref pos 1) 1) #f) (comp_diag_princ_asc matriz color (+ (car pos) 1) (+ (list-ref pos 1) 1) #f))]
    )
  )

; Comprueba si se puede obtener fichas del jugador contrario en la diagonal principal de manera ascendente
(define (comp_diag_princ_asc matriz color num_fila num_col ver_opuesto)
  (cond
    [(or (equal? num_fila 8) (equal? num_col 8)) #f] ;No ha terminado con un valor del color del jugador
    [(equal? (list-ref(list-ref matriz num_fila) num_col) "-") #f];La posición estudiada es vacía
    [(equal? (list-ref(list-ref matriz num_fila) num_col) color) ver_opuesto] ; Hay una cadena de al menos una ficha del color del otro jugador y termina con otra del color del jugador
    [else (comp_diag_princ_asc matriz color (+ num_fila 1) (+ num_col 1) #t)]
    ))

; Comprueba si se puede obtener fichas del jugador contrario en la diagonal principal de manera descendente
(define (comp_diag_princ_desc matriz color num_fila num_col ver_opuesto)
  (cond
    [(or (equal? num_fila -1) (equal? num_col -1)) #f];No ha terminado con un valor del color del jugador
    [(equal? (list-ref(list-ref matriz num_fila) num_col) "-") #f];La posición estudiada es vacía
    [(equal? (list-ref(list-ref matriz num_fila) num_col) color) ver_opuesto] ; Hay una cadena de al menos una ficha del color del otro jugador y termina con otra del color del jugador
    [else (comp_diag_princ_desc matriz color (- num_fila 1) (- num_col 1) #t)]
    ))

; Comprueba si se puede obtener fichas del jugador contrario en la diagonal secundaria
(define (comprobar_diagonal_secundaria matriz color pos)
  (cond
    [(and (equal? (car pos) 0) (or (equal? (list-ref pos 1) 0) (equal? (list-ref pos 1) 1))) #f]; La esquina superior izquierda no interesa estudiar puesto que no va aportar nada
    [(and (equal? (car pos) 1) (equal? (list-ref pos 1) 0)) #f]
    [(and (equal? (car pos) 7) (or (equal? (list-ref pos 1) 6) (equal? (list-ref pos 1) 7))) #f]; La esquina inferior derecha no interesa estudiar puesto que no va aportar nada
    [(and (equal? (car pos) 6) (equal? (list-ref pos 1) 7)) #f]
    [(or (equal? (car pos) 0) (equal? (car pos) 1)) (comp_diag_sec_desc matriz color (+ (car pos) 1) (- (list-ref pos 1) 1) #f)]
    [(or (equal? (car pos) 6) (equal? (car pos) 7)) (comp_diag_sec_asc matriz color (- (car pos) 1) (+ (list-ref pos 1) 1) #f)]
    [else (or (comp_diag_sec_desc matriz color (+ (car pos) 1) (- (list-ref pos 1) 1) #f) (comp_diag_sec_asc matriz color (- (car pos) 1) (+ (list-ref pos 1) 1) #f))]
    )
  )

; Comprueba si se puede obtener fichas del jugador contrario en la diagonal secundaria de manera ascendente
(define (comp_diag_sec_asc matriz color num_fila num_col ver_opuesto)
  (cond
    [(or (equal? num_fila -1) (equal? num_col 8)) #f] ;No ha terminado con un valor del color del jugador
    [(equal? (list-ref(list-ref matriz num_fila) num_col) "-") #f];La posición estudiada es vacía
    [(equal? (list-ref(list-ref matriz num_fila) num_col) color) ver_opuesto] ; Hay una cadena de al menos una ficha del color del otro jugador y termina con otra del color del jugador
    [else (comp_diag_sec_asc matriz color (- num_fila 1) (+ num_col 1) #t)]
    ))

; Comprueba si se puede obtener fichas del jugador contrario en la diagonal secundaria de manera descendente
(define (comp_diag_sec_desc matriz color num_fila num_col ver_opuesto)
  (cond
    [(or (equal? num_fila 8) (equal? num_col -1)) #f];No ha terminado con un valor del color del jugador
    [(equal? (list-ref(list-ref matriz num_fila) num_col) "-") #f];La posición estudiada es vacía
    [(equal? (list-ref(list-ref matriz num_fila) num_col) color) ver_opuesto] ; Hay una cadena de al menos una ficha del color del otro jugador y termina con otra del color del jugador
    [else (comp_diag_sec_desc matriz color (+ num_fila 1) (- num_col 1) #t)]
    ))

; Devuelve una lista en la que una de sus elementos va a sufrir un cambio
(define (ajustar_columna lista columna color)
  (cond
    [(empty? lista) '()] ; No hay más elementos
    [(equal? columna 0)(append (list color) (cdr lista))] ; Se ha alcanzado el elemento a modificar, se modifica y se une con el resto de elementos de la lista
    [else (append (list (car lista)) (ajustar_columna (cdr lista) (- columna 1) color))])) ; Se va reconstruyendo la lista mientras que se va buscando el elemento buscado

; Devuelve una matriz en la que una de sus filas va a sufrir un cambio
(define (ajustar_fila matriz fila columna color)
  (cond
    [(empty? matriz) '()] ; No hay más filas
    [(equal? fila 0) (append (list (ajustar_columna (car matriz) columna color)) (cdr matriz))] ; Se ha alcanzado la fila a modificar, se modifica y se une con el resto de filas de la matriz
    [else (append (list(car matriz)) (ajustar_fila (cdr matriz) (- fila 1) columna color))])) ; Se va reconstruyendo la matriz mientras que se va buscando la fila buscado

; Proporciona la matriz pintada en la fila de manera que va aumentando el valor de la fila
(define (pintar_fila_asc matriz color pos num_col verificar)
  (cond
    ;Devuelve la matriz pasada por parámetro si no es la primera ficha pasada del mismo color al pasado por parámetro o se sale de rango los valores de la columna
    [(or (equal? num_col 8) (and (equal? (list-ref (list-ref matriz (car pos)) num_col) color) (equal? verificar #t))) matriz]
    ;Pasa al siguiente elemento a pintar si es el primer elemento del color pasado por parámetro
    [(and (equal? (list-ref (list-ref matriz (car pos)) num_col) color) (equal? verificar #f))
     (pintar_fila_asc matriz color pos (+ num_col 1) #t)]
    ;Cambia el color de una casilla y pasa al siguiente elemento a estudiar
    [else (pintar_fila_asc (ajustar_fila matriz (car pos) num_col color) color pos (+ num_col 1) verificar)]))

; Proporciona la matriz pintada en la fila de manera que va disminuyendo el valor de la fila
(define (pintar_fila_desc matriz color pos num_col verificar)
  (cond
    ;Devuelve la matriz pasada por parámetro si no es la primera ficha pasada del mismo color al pasado por parámetro o se sale de rango los valores de la columna
    [(or (equal? num_col -1) (and (equal? (list-ref (list-ref matriz (car pos)) num_col) color) (equal? verificar #t))) matriz]
    ;Pasa al siguiente elemento a pintar si es el primer elemento del color pasado por parámetro
    [(and (equal? (list-ref (list-ref matriz (car pos)) num_col) color) (equal? verificar #f))
     (pintar_fila_desc matriz color pos (- num_col 1) #t)]
    ;Cambia el color de una casilla y pasa al siguiente elemento a estudiar
    [else (pintar_fila_desc (ajustar_fila matriz (car pos) num_col color) color pos (- num_col 1) verificar)]))
  
; Proporciona la matriz pintada en la columna de manera que va aumentando el valor de la columna
(define (pintar_col_asc matriz color pos num_fila verificar)
  (cond
    ;Devuelve la matriz pasada por parámetro si no es la primera ficha pasada del mismo color al pasado por parámetro o se sale de rango los valores de la fila
    [(or (equal? num_fila 8) (and (equal? (list-ref (list-ref matriz num_fila) (list-ref pos 1)) color) (equal? verificar #t))) matriz]
    ;Pasa al siguiente elemento a pintar si es el primer elemento del color pasado por parámetro
    [(and (equal? (list-ref (list-ref matriz num_fila) (list-ref pos 1)) color) (equal? verificar #f))
     (pintar_col_asc matriz color pos (+ num_fila 1) #t)]
    ;Cambia el color de una casilla y pasa al siguiente elemento a estudiar
    [else (pintar_col_asc (ajustar_fila matriz num_fila (list-ref pos 1) color) color pos (+ num_fila 1) verificar)]))
  
; Proporciona la matriz pintada en la columna de manera que va disminuyendo el valor de la columna
(define (pintar_col_desc matriz color pos num_fila verificar)
  (cond
    ;Devuelve la matriz pasada por parámetro si no es la primera ficha pasada del mismo color al pasado por parámetro o se sale de rango los valores de la fila
    [(or (equal? num_fila -1) (and (equal? (list-ref (list-ref matriz num_fila) (list-ref pos 1)) color) (equal? verificar #t))) matriz]
    ;Pasa al siguiente elemento a pintar si es el primer elemento del color pasado por parámetro
    [(and (equal? (list-ref (list-ref matriz num_fila) (list-ref pos 1)) color) (equal? verificar #f))
     (pintar_col_desc matriz color pos (- num_fila 1) #t)]
    ;Cambia el color de una casilla y pasa al siguiente elemento a estudiar
    [else (pintar_col_desc (ajustar_fila matriz num_fila (list-ref pos 1) color) color pos (- num_fila 1) verificar)]))

; Proporciona la matriz pintada en la diagonal principal de manera ascendente
(define (pintar_diag_princ_asc matriz color pos num_fila num_col verificar)
  (cond
    ;Devuelve la matriz pasada por parámetro si no es la primera ficha pasada del mismo color al pasado por parámetro o se sale de rango los valores de la fila o la columna
    [(or (equal? num_col 8) (equal? num_fila 8) (and (equal? (list-ref (list-ref matriz num_fila) num_col) color) (equal? verificar #t))) matriz]
    ;Pasa al siguiente elemento a pintar si es el primer elemento del color pasado por parámetro
    [(and (equal? (list-ref (list-ref matriz num_fila) num_col) color) (equal? verificar #f))
     (pintar_diag_princ_asc matriz color pos (+ num_fila 1) (+ num_col 1) #t)]
    ;Cambia el color de una casilla y pasa al siguiente elemento a estudiar
    [else (pintar_diag_princ_asc (ajustar_fila matriz num_fila num_col color) color pos (+ num_fila 1) (+ num_col 1) verificar)]))

; Proporciona la matriz pintada en la diagonal principal de manera descendente
(define (pintar_diag_princ_desc matriz color pos num_fila num_col verificar)
  (cond
    ;Devuelve la matriz pasada por parámetro si no es la primera ficha pasada del mismo color al pasado por parámetro o se sale de rango los valores de la fila o la columna
    [(or (equal? num_col -1) (equal? num_fila -1) (and (equal? (list-ref (list-ref matriz num_fila) num_col) color) (equal? verificar #t))) matriz]
    ;Pasa al siguiente elemento a pintar si es el primer elemento del color pasado por parámetro
    [(and (equal? (list-ref (list-ref matriz num_fila) num_col) color) (equal? verificar #f))
     (pintar_diag_princ_desc matriz color pos (- num_fila 1) (- num_col 1) #t)]
    ;Cambia el color de una casilla y pasa al siguiente elemento a estudiar
    [else (pintar_diag_princ_desc (ajustar_fila matriz num_fila num_col color) color pos (- num_fila 1) (- num_col 1) verificar)]))

; Proporciona la matriz pintada en la diagonal secundaria de manera ascendente
(define (pintar_diag_sec_asc matriz color pos num_fila num_col verificar)
  (cond
    ;Devuelve la matriz pasada por parámetro si no es la primera ficha pasada del mismo color al pasado por parámetro o se sale de rango los valores de la fila o la columna
    [(or (equal? num_col 8) (equal? num_fila -1) (and (equal? (list-ref (list-ref matriz num_fila) num_col) color) (equal? verificar #t))) matriz]
    ;Pasa al siguiente elemento a pintar si es el primer elemento del color pasado por parámetro
    [(and (equal? (list-ref (list-ref matriz num_fila) num_col) color) (equal? verificar #f))
     (pintar_diag_sec_asc matriz color pos (- num_fila 1) (+ num_col 1) #t)]
    ;Cambia el color de una casilla y pasa al siguiente elemento a estudiar
    [else (pintar_diag_sec_asc (ajustar_fila matriz num_fila num_col color) color pos (- num_fila 1) (+ num_col 1) verificar)]))

; Proporciona la matriz pintada en la diagonal secundaria de manera descendente
(define (pintar_diag_sec_desc matriz color pos num_fila num_col verificar)
  (cond
    ;Devuelve la matriz pasada por parámetro si no es la primera ficha pasada del mismo color al pasado por parámetro o se sale de rango los valores de la fila o la columna
    [(or (equal? num_col -1) (equal? num_fila 8) (and (equal? (list-ref (list-ref matriz num_fila) num_col) color) (equal? verificar #t))) matriz]
    ;Pasa al siguiente elemento a pintar si es el primer elemento del color pasado por parámetro
    [(and (equal? (list-ref (list-ref matriz num_fila) num_col) color) (equal? verificar #f))
     (pintar_diag_sec_desc matriz color pos (+ num_fila 1) (- num_col 1) #t)]
    ;Cambia el color de una casilla y pasa al siguiente elemento a estudiar
    [else (pintar_diag_sec_desc (ajustar_fila matriz num_fila num_col color) color pos (+ num_fila 1) (- num_col 1) verificar)]))

;Proporciona una matriz con los cambios sufridos en una fila del tablero a partir de la colocación de una pieza en una posición
(define (cambiar_color_fila matriz pos color)
  (cond
    ;Considera que puede avanzar hacia la izquierda o hacia la derecha en la propia fila
    [(and (comp_fila_asc matriz color pos (+ (list-ref pos 1) 1) #f)(comp_fila_desc matriz color pos (- (list-ref pos 1) 1) #f))
     (pintar_fila_desc (pintar_fila_asc matriz color pos (list-ref pos 1)) color pos (list-ref pos 1) #f)]
    ;Considera que puede avanzar hacia la derecha en la propia fila
    [(comp_fila_asc matriz color pos (+ (list-ref pos 1) 1) #f)
     (pintar_fila_asc matriz color pos (list-ref pos 1) #f)]
    ;Considera que puede avanzar hacia la izquierda en la propia fila
    [(comp_fila_desc matriz color pos (- (list-ref pos 1) 1) #f)
     (pintar_fila_desc matriz color pos (list-ref pos 1) #f)]
    ;Considera que no puede avanzar por ningún sentido de la fila
    [else matriz]))

;Proporciona una matriz con los cambios sufridos en una columna del tablero a partir de la colocación de una pieza en una posición
(define (cambiar_color_col matriz pos color)
  (cond
    ;Considera que puede avanzar hacia arriba o hacia abajo en la propia columna
    [(and (comp_columna_asc matriz color pos (+ (car pos) 1) #f)(comp_columna_desc matriz color pos (- (car pos) 1) #f))
     (pintar_col_desc (pintar_col_asc matriz color pos (car pos) #f) color pos (car pos) #f)]
    ;Considera que puede avanzar hacia abajo en la propia columna
    [(comp_columna_asc matriz color pos (+ (car pos) 1) #f)
     (pintar_col_asc matriz color pos (car pos) #f)]
    ;Considera que puede avanzar hacia arriba en la propia columna
    [(comp_columna_desc matriz color pos (- (car pos) 1) #f)
     (pintar_col_desc matriz color pos (car pos) #f)]
    ;Considera que no puede avanzar por ningún sentido de la columna
    [else matriz]))

;Proporciona una matriz con los cambios sufridos en una diagonal principal del tablero a partir de la colocación de una pieza en una posición
(define (cambiar_color_diag_princ matriz pos color)
  (cond
    ;Considera que puede avanzar hacia arriba o hacia abajo en la propia diagonal principal
    [(and (comp_diag_princ_asc matriz color (+ (car pos) 1) (+ (list-ref pos 1) 1) #f)(comp_diag_princ_desc matriz color (+ (car pos) 1) (- (list-ref pos 1) 1) #f))
     (pintar_diag_princ_asc (pintar_diag_princ_desc matriz color pos (car pos) (list-ref pos 1) #f) color pos (car pos) (list-ref pos 1) #f)]
    ;Considera que puede avanzar hacia arriba en la propia diagonal principal
    [(comp_diag_princ_asc matriz color (+ (car pos) 1) (+ (list-ref pos 1) 1) #f)
     (pintar_diag_princ_asc matriz color pos (car pos) (list-ref pos 1) #f)]
    ;Considera que puede avanzar hacia abajo en la propia diagonal principal
    [(comp_diag_princ_desc matriz color (- (car pos) 1) (- (list-ref pos 1) 1) #f)
     (pintar_diag_princ_desc matriz color pos (car pos) (list-ref pos 1) #f)]
    ;Considera que no puede avanzar por ningún sentido de la diagonal principal
    [else matriz]))

;Proporciona una matriz con los cambios sufridos en una diagonal secundaria del tablero a partir de la colocación de una pieza en una posición
(define (cambiar_color_diag_sec matriz pos color)
  (cond
    ;Considera que puede avanzar hacia arriba o hacia abajo en la propia diagonal secundaria
    [(and (comp_diag_sec_asc matriz color (- (car pos) 1) (+ (list-ref pos 1) 1) #f)(comp_diag_sec_desc matriz color (+ (car pos) 1) (- (list-ref pos 1) 1) #f))
     (pintar_diag_sec_asc (pintar_diag_sec_desc matriz color pos (car pos) (list-ref pos 1)) color pos (car pos) (list-ref pos 1) #f)]
    ;Considera que puede avanzar hacia arriba en la propia diagonal secundaria
    [(comp_diag_sec_asc matriz color (- (car pos) 1) (+ (list-ref pos 1) 1) #f)
     (pintar_diag_sec_asc matriz color pos (car pos) (list-ref pos 1) #f)]
    ;Considera que puede avanzar hacia abajo en la propia diagonal secundaria
    [(comp_diag_sec_desc matriz color (+ (car pos) 1) (- (list-ref pos 1) 1) #f)
     (pintar_diag_sec_desc matriz color pos (car pos) (list-ref pos 1) #f)]
    ;Considera que no puede avanzar por ningún sentido de la diagonal secundaria
     [else matriz]))

;Proporciona una matriz con los cambios sufridos en el tablero a partir de la colocación de una pieza en una posición
(define (cambiar_color matriz pos color) 
  (cambiar_color_diag_sec (cambiar_color_diag_princ (cambiar_color_col (cambiar_color_fila (ajustar_fila matriz (car pos) (list-ref pos 1) color) pos color) pos color) pos color) pos color)
  )


(define matriz
  (list
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "B" "N" "-" "-")
   (list "-" "-" "-" "B" "B" "N" "-" "-")
   (list "-" "-" "-" "N" "N" "N" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   ))

(define matriz2
  (list
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "N" "N" "N" "-" "-")
   (list "-" "-" "-" "N" "B" "B" "-" "-")
   (list "-" "-" "-" "N" "B" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   ))

(define matriz3
  (list
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "N" "N" "N" "-" "-")
   (list "-" "-" "-" "B" "B" "N" "-" "-")
   (list "-" "-" "-" "-" "B" "N" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   ))

(define matriz4
  (list
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "N" "B" "-" "-" "-")
   (list "-" "-" "-" "N" "B" "B" "-" "-")
   (list "-" "-" "-" "N" "N" "N" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   (list "-" "-" "-" "-" "-" "-" "-" "-")
   ))